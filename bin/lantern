#! /usr/bin/env python

import argparse
from lantern.structures import Archiver, init_experiment

from lantern import engine
from lantern import structures
from lantern.vis import server as vis

def init_exp(args) :
    init_experiment(args.path)

def store_model(args) :
    a = Archiver(args.path)
    a.store()

def retrieve_model(args) :
    a = Archiver(args.path)
    a.retrieve(args.store_id)

def list_model(args) :
    a = Archiver(args.path)
    models, loaded = a.get_archive_descriptions()
    print("")
    for k in models :
        if (loaded == k) :
            print(f'\t{k}*\t{models[k].name}\t{models[k].context}')
        else : 
            print(f'\t{k}\t{models[k].name}\t{models[k].context}')
    print("")

def train_experiment(args) :
    model_info = structures.Model(args.model_dir)
    engine.train_model(model_info, args.data_dir, args.epochs, run_id=args.id)

def vis_server(args) :
    print(__name__)
    vis.run_server(args.root_dir, args.port)


parser = argparse.ArgumentParser("tool for managing experiments")
sub_add = parser.add_subparsers()

init_parser = sub_add.add_parser('init', help="make an experiment archivable") 
init_parser.add_argument('path', help='where to create the archive', default='.', nargs='?')
init_parser.set_defaults(func=init_exp)

store_parser = sub_add.add_parser('store', help='store model')
store_parser.add_argument('path', help='model root to store', default='.', nargs='?')
store_parser.set_defaults(func=store_model)

retrieve_parser = sub_add.add_parser('retrieve', help='store model', aliases=['ret'])
retrieve_parser.add_argument("store_id", help="id of model to restore")
retrieve_parser.add_argument('path', help='model root to work from', default='.', nargs='?')
retrieve_parser.set_defaults(func=retrieve_model)

list_parser = sub_add.add_parser('list', help='list stored models')
list_parser.add_argument('path', help='model root to work from', default='.', nargs='?')
list_parser.set_defaults(func=list_model)

train_parser = sub_add.add_parser('train', help="train a model") 
train_parser.add_argument('model_dir', help='model root directory')
train_parser.add_argument('data_dir', help='root directory of dataset')
train_parser.add_argument('--epochs', help='target epoch to train to', default='30', type=int)
train_parser.add_argument('--id', help='continue the run with this id', default=-1, type=int)
train_parser.set_defaults(func=train_experiment)

vis_parser = sub_add.add_parser('vis', help='run visualization server')
vis_parser.add_argument('root_dir', help='directory to run from', nargs='?', default='.')
vis_parser.add_argument('-p', '--port', help='port to run on', type=int, default=3030)
vis_parser.set_defaults(func=vis_server) 


args = parser.parse_args()
args.func(args)
