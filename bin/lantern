#! /usr/bin/env python

import argparse

from lantern import engine
from lantern.model import Model
from lantern.vis import server as vis_server
#from lantern.vis import data_server 
from lantern.save import Saver

def init_model(args) :
    Model.create_new(args.path)

def save_weights(args) :
    model = Model(args.model_dir)
    if args.save_name is None :
        args.save_name = args.key
    model.get_pretrained_path().mkdir(exist_ok=True)
    args.save_name = model.get_pretrained_path() / args.save_name
    Saver.save_model_dict(model.get_checkpoint_path(args.rid), args.key, args.save_name)

def train_model(args) :
    model = Model(args.model_dir)

    if args.rid == -1 :
        args.rid = model.get_new_run()

    if model.get_description(args.rid) is None :
        if args.description is None :
            args.description = input("Description for this run?\n")
        model.set_description(args.rid, args.description)

    engine.train_model(model, args.data_dir, args.epochs, args.rid)

def infer_model(args) :
    model_info = Model(args.model_dir)
    engine.run_inference(model_info, args.rid, args.data_dir)


def run_vis_server(args) :
    vis_server.run_server(args.root_dir, args.port)


def run_data_vis_server(args) :
    data_server.run_server(args.root_dir, args.data_dir, args.port)


parser = argparse.ArgumentParser("tool for managing experiments")
sub_add = parser.add_subparsers()

init_parser = sub_add.add_parser('init', help="make an experiment archivable") 
init_parser.add_argument('path', help='where to create the archive', default='.', nargs='?')
init_parser.set_defaults(func=init_model)

# list_parser = sub_add.add_parser('list', help='list stored models')
# list_parser.add_argument('path', help='model root to work from', default='.', nargs='?')
#list_parser.set_defaults(func=list_model)

save_weights_parser = sub_add.add_parser('save_weights', help="save weights of run to load pretrained later") 
save_weights_parser.add_argument('model_dir', help='model root directory')
save_weights_parser.add_argument('rid', help='run id to save weights from', type=int)
save_weights_parser.add_argument('key', help='key used to save the models weights in the checkpoint')
save_weights_parser.add_argument('save_name', help='name to write out', default=None , nargs='?')
save_weights_parser.set_defaults(func=save_weights)


train_parser = sub_add.add_parser('train', help="train a model") 
train_parser.add_argument('model_dir', help='model root directory')
train_parser.add_argument('data_dir', help='root directory of dataset')
train_parser.add_argument('--epochs', help='target epoch to train to', default='30', type=int)
train_parser.add_argument('--rid', help='continue the run with this run id', default=-1, type=int)
train_parser.add_argument('--description', help='a description of this run, if one has not been added ', default=None)
train_parser.set_defaults(func=train_model)

infer_parser = sub_add.add_parser('infer', help="infer a model") 
infer_parser.add_argument('model_dir', help='model root directory')
infer_parser.add_argument('rid', help='restore from this run id\'s latest checkpoint', type=int)
infer_parser.add_argument('data_dir', help='root directory of data, passed to run_inference')
infer_parser.set_defaults(func=infer_model)



vis_parser = sub_add.add_parser('vis', help='run visualization server')
vis_parser.add_argument('root_dir', help='directory to run from', nargs='?', default='.')
vis_parser.add_argument('-p', '--port', help='port to run on', type=int, default=3030)
vis_parser.set_defaults(func=run_vis_server) 

data_vis_parser = sub_add.add_parser('data_vis', help='run data visualization server')
data_vis_parser.add_argument('root_dir', help='directory to run from')
data_vis_parser.add_argument('data_dir', help='directory of dataset')
data_vis_parser.add_argument('-p', '--port', help='port to run on', type=int, default=3030)
data_vis_parser.set_defaults(func=run_data_vis_server) 



args = parser.parse_args()
args.func(args)
